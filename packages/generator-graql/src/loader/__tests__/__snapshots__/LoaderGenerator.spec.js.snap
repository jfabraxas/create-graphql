// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate a loader 1`] = `
Object {
  "loader": "// @flow

import DataLoader from 'dataloader';
import ConnectionFromMongoCursor from '../connection/ConnectionFromMongoCursor';
import ExampleModel from '../model/Example';
import mongooseLoader from './mongooseLoader';

type ExampleType = {
  id: string,
  _id: string,
  exampleField: string,
}

export default class Example {
  id: string;
  _id: string;
  exampleField: string;

  static getLoader = () => new DataLoader(ids => mongooseLoader(ExampleModel, ids));

  constructor(data: ExampleType) {
    this.id = data.id;
    this._id = data._id;
    this.exampleField = data.exampleField;
  }

  static viewerCanSee(viewer, data) {
    // TODO: handle security

    return true;
  }

  static async load(viewer, id) {
    if (!id) {
      return null;
    }

    const data = await Example.ExampleLoader.load(id.toString());

    return Example.viewerCanSee(viewer, data) ? new Example(data) : null;
  }

  static clearCache(id) {
    return Example.ExampleLoader.clear(id.toString());
  }

  static async loadExamples(viewer, args) {
    // TODO: specify conditions
    const examples = ExampleModel.find({});

    return ConnectionFromMongoCursor.connectionFromMongoCursor(
      viewer, examples, args, Example.load,
    );
  }
}
",
}
`;

exports[`generate a loader with schema 1`] = `
Object {
  "loader": "// @flow

import DataLoader from 'dataloader';
import ConnectionFromMongoCursor from '../connection/ConnectionFromMongoCursor';
import PostModel from '../model/Post';
import mongooseLoader from './mongooseLoader';

type PostType = {
  id: string,
  _id: string,
  title: string,
  user: string,
  slug: string,
  createdAt: string,
  updatedAt: string,
}

export default class Post {
  id: string;
  _id: string;
  title: string;
  user: string;
  slug: string;
  createdAt: string;
  updatedAt: string;

  static getLoader = () => new DataLoader(ids => mongooseLoader(PostModel, ids));

  constructor(data: PostType) {
    this.id = data.id;
    this._id = data._id;
    this.title = data.title;
    this.user = data.user;
    this.slug = data.slug;
    this.createdAt = data.createdAt;
    this.updatedAt = data.updatedAt;
  }

  static viewerCanSee(viewer, data) {
    // TODO: handle security

    return true;
  }

  static async load(viewer, id) {
    if (!id) {
      return null;
    }

    const data = await Post.PostLoader.load(id.toString());

    return Post.viewerCanSee(viewer, data) ? new Post(data) : null;
  }

  static clearCache(id) {
    return Post.PostLoader.clear(id.toString());
  }

  static async loadPosts(viewer, args) {
    // TODO: specify conditions
    const posts = PostModel.find({});

    return ConnectionFromMongoCursor.connectionFromMongoCursor(
      viewer, posts, args, Post.load,
    );
  }
}
",
}
`;

exports[`generate a loader with schema and without timestamps 1`] = `
Object {
  "loader": "// @flow

import DataLoader from 'dataloader';
import ConnectionFromMongoCursor from '../connection/ConnectionFromMongoCursor';
import UserModel from '../model/User';
import mongooseLoader from './mongooseLoader';

type UserType = {
  id: string,
  _id: string,
  name: string,
  password: string,
  email: string,
  active: boolean,
  lastLoginAt: string,
}

export default class User {
  id: string;
  _id: string;
  name: string;
  password: string;
  email: string;
  active: boolean;
  lastLoginAt: string;

  static getLoader = () => new DataLoader(ids => mongooseLoader(UserModel, ids));

  constructor(data: UserType) {
    this.id = data.id;
    this._id = data._id;
    this.name = data.name;
    this.password = data.password;
    this.email = data.email;
    this.active = data.active;
    this.lastLoginAt = data.lastLoginAt;
  }

  static viewerCanSee(viewer, data) {
    // TODO: handle security

    return true;
  }

  static async load(viewer, id) {
    if (!id) {
      return null;
    }

    const data = await User.UserLoader.load(id.toString());

    return User.viewerCanSee(viewer, data) ? new User(data) : null;
  }

  static clearCache(id) {
    return User.UserLoader.clear(id.toString());
  }

  static async loadUsers(viewer, args) {
    // TODO: specify conditions
    const users = UserModel.find({});

    return ConnectionFromMongoCursor.connectionFromMongoCursor(
      viewer, users, args, User.load,
    );
  }
}
",
}
`;
